<molgenis name="org.molgenis">
	<module name="pheno">
		<description>Pheno is an generic version of XGAP developed in close
			collaboration within GEN2PHEN, EBI, UMC Groningen, U Groningen, FIMM,
			U Leicester. Todo: add docs again from pheno model. The pheno core
			needs to be preserved! Add changelog special section.
		</description>
		<entity name="Species" extends="OntologyTerm">
			<description>Ontology terms for species. E.g. Arabidopsis thaliana.
				DISCUSSION: should we avoid subclasses of OntologyTerm and instead
				make a 'tag' filter on terms so we can make pulldowns context
				dependent (e.g. to only show particular subqueries of ontologies).
			</description>
		</entity>
		<entity name="AlternateId" extends="OntologyTerm">
			<description>
				An external identifier for an annotation. For example: name='R13H8.1', ontology='ensembl' or name='WBgene00000912', ontology='wormbase'.
			</description>
		</entity>
		<entity name="ObservationElement" implements="InvestigationElement"
			xref_label="name">
			<description> Elements that are the targets or features we are
				looking at of our research.
			</description>
			<field name="AlternateId" nillable="true" type="mref"
				xref_entity="AlternateId" label="Alternative identifiers"
				description="Alternative identifiers or symbols that this element is known by." />
		</entity>
		<entity name="Characteristic" extends="ObservationElement">
			<description>
			Characteristics are yes-no statements - will not be used as features, use as answers to questions
			</description>
		</entity>
		<entity name="ObservationTarget" extends="ObservationElement">
			<description> An ObservationTarget class defines the subjects of
				observation. For instance: individual 1 from Investigation x. The
				ObservationTarget class maps to XGAP:Subject, METABASE:Patient and
				maps to Page:Abstract_Observation_Target. The name of
				observationTargets is unique.
			</description>
			<unique fields="name" />
		</entity>
		<entity name="ObservableFeature" extends="ObservationElement">
			<description>ObservableFeature defines anything that can be observed
				in a phenotypic Investigation. For instance: Height, Systolic blood
				pressure, Diastolic blood pressure, and Treatment for hypertension
				are observable features. The name of ObservableFeature is unique
				within one Investigation. It is recommended that each
				ObservableFeature is named according to a well-defined ontology term
				which can be specified via ontologyReference. Note that in some
				instances an observableFeature can also be an observationTarget, for
				example in the case of correlation matrices. The ObservableFeature
				class maps to XGAP:Trait, METABASE:Question, FuGE:DimensionElement,
				and PaGE:ObservableFeature. Multi-value features can be grouped by
				Protocol. For instance: high blood pressure can be inferred from
				observations for features systolic and diastolic blood pressure.
				There may be many alternative protocols to measure a feature. See
				Protocol section.
			</description>
			
			<field name="chars" type="mref" xref_entity="Characteristic" />
		</entity>
		<entity name="Measurement" extends="ObservableFeature"
			decorator="decorators.MeasurementDecorator">
			<description>Generic observable feature to flexibly define a
				measurement
				Open-ended continuous value
			</description>
			<field name="unit" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the well-defined measurement unit used to observe this feature 
					(if feature is that concrete). E.g. mmHg" />
			<field name="dataType" type="enum" default="string"
				enum_options="[xref,string,categorical,datetime,int,code,image,decimal,bool,file,log,data,exe]"
				description="(Optional) Reference to the technical data type. E.g. 'int'" />
			<!-- each enum code is defined in MolgenisFieldTypes to automatically 
				generate UI. -->
			<field name="temporal" type="boolean" default="false"
				description="Whether this feature is time dependent and can have different values when measured 
					on different times (e.g. weight, temporal=true) or generally only measured once (e.g. birth date, 
					temporal=false) "/>
			<!--  field name="permitValues" type="mref" xref_entity="PermittedValue" nillable="true" description="Translation of codes into categories if applicable"/>-->
			<field name="categories" type="mref" xref_entity="Category" nillable="true" description="Translation of codes into categories if applicable"/>
			<field name="description" type="text" nillable="true"
				description="(Optional) Rudimentary meta data about the observable feature. Use of ontology 
					terms references to establish unambigious descriptions is recommended" />
			<field name="targettypeAllowedForRelation" type="xref"
				xref_entity="MolgenisEntity"
				description="Subclass of ObservationTarget (Individual, Panel or Location) that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result in ObservedValues 
					that have relations to Panels)"
				nillable="true" label="ObservationTarget type allowed for relation" />
			<field name="panelLabelAllowedForRelation" type="string"
				description="Label that must have been applied to the Panel that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result
					in ObservedValues that have relations to Panels labeled as 'Species')"
				nillable="true" label="Panel label allowed for relation" />
		</entity>
		
		<entity name="Category" extends="ObservationElement">
		
			<description>Special kind of ObservationElement to define categorical answer codes such as are
				often used in Questionaires. A list of categories can be attached to an
				Measurement using Measurement.categories. For example the
				Measurement 'sex' has {code_string = 1, label=male} and {code_string = 2,
				label=female}. Categories can be linked to well-defined ontology terms
				via the ontologyReference. Category extends ObservationElement such that
				it can be referenced by ObservedValue.value. The Category class maps
				to METABASE::Category
			</description>
			<field name="code_string" type="string"
				description="The code used to represent this category. For example: { '1' codes for 'male', '2'-'female'}" />
			<field name="label"
				description="User friendly textual representation of this category. For example : 'male'" />
			<field name="description" type="text"
				description="Description of the code.
				Use of ontology terms references to establish unambigious descriptions is
				recommended" />
			<field name="isMissing" type="bool" default="false"
				description="whether this code should be treated as missing value." />
		</entity>
		<entity name="Individual" extends="ObservationTarget">
			<description> The Individuals class defines human cases that are used
				as observation target. The Individual class maps to XGAP:Individual
				and PaGE:Individual. Note that minimal information like 'sex' can be
				defined as ObservedValue, and that that basic relationships like
				'father' and 'mother' can also be defined via ObservedRelationship,
				using the 'relation' field. Groups of individuals can be defined via
				Panel.
			</description>
			<field name="Mother" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the mother of the individual." />
			<field name="Father" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the father of the individual." />
			<field name="ethnicOrigin" description="Refers to the ethnic origin of the individual" nillable="true" />
		</entity>
		<entity name="Location" extends="ObservationTarget">
			<description>This class defines physical locations such as buildings,
				departments, rooms, freezers and cages. Use ObservedValues to link
				locations to eachother, to build a location hierarchy.
			</description>
		</entity>
		<entity name="Panel" extends="ObservationTarget">
			<description>The Panel class defines groups of individuals based on
				cohort design, case/controls, families, etc. For instance: LifeLines
				cohort, 'middle aged man', 'recombinant mouse inbred Line dba x b6'
				or 'Smith family'. A Panel can act as a single ObservationTarget.
				For example: average height (ObservedValue) in the LifeLines cohort
				(Panel) is 174cm. The Panel class maps to XGAP:Strain and PaGE:Panel
				classes. In METABASE this is assumed there is one panel per study.
			</description>
			<field name="Individuals" type="mref" xref_entity="Individual"
				nillable="true" description="The list of individuals in this panel" />
			<field name="Species" type="xref" nillable="true" xref_entity="Species"
				xref_field="id" xref_label="name"
				description="The species this panel is an instance of/part of/extracted from." />
			<field name="PanelType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="Indicate the type of Panel (example: Natural=wild type, Parental=parents of a cross, F1=First generation of cross, RCC=Recombinant congenic, CSS=chromosome substitution)" />
			<field name="FounderPanels" type="mref" nillable="true"
				xref_entity="Panel" xref_field="id" xref_label="name"
				description="The panel(s) that were used to create this panel." />
		</entity>
		<entity name="Observation" abstract="true" implements="Identifiable">
			<description>
				Generic model for observations, that is, the observed value on a
				feature-target pair given a protocol. See the 'data' package for all
				kinds of observations. Typically, this data is visualized in a
				spreadsheet format having rows (targets) and columns (features). Use
				cases that need support are:
				<ul>
					<li>Simple text/int values, e.g. 'length in cm (row;
						observableFeature) of individual1 (col; observationTarget) = 179
						(value). These can be stored in subclass 'ObservedValue'
					</li>
					<li>Relationship values, e.g. 'individual 1(row:observationtarget)
						and individual2 (col:observationtarget) = brothers
						(value:observabvlefeature). These can be stored in subclass
						'ObservedValue'
					</li>
					<li>Categoryd values, e.g. 'invidual 1 (row) and feature 'sex'
						(col) = 'male' (value; reference to code or ontology. These can be
						stored in subclass 'ObservedValue'
					</li>
					<li>Data file values, e.g., 'aligned.bam' or 'plink imputed'
						(feature). These can be stored in subclass DataFile
					</li>
					<li>Data matrices, e.g. 'qtlProfile' (feature) for 'bxd panel'
						(target). These can be stored in subclass ObservedData
					</li>
					<li>Measurements are typically grouped by the protocol used,
						therefore a link to protocol application is added.
					</li>
				</ul>
				Implementation wise, the data may or may not be stored in the
				database directly. This is an optimization strategy independent of
				this generic structure. This structure is born out of the merger of
				Pheno-OM, XGAP and MAGE-TAB.<!-- The original documentation: <br /> Generic 
					data structure for aiming the values of a data set as described in Data. 
					Each DataElement describes a cell in a data matrix of rows (from) and columns 
					(to), e.g., in "dataset X" it was measured that geneX (col) relates to geneZ 
					(row). <br /> MAGE-TAB 1.1. has the column ArrayDataMatrix and DerivedArrayDataMatrix. 
					The formats of both types are tab-delimited and the distinction is that an 
					ArrayDataMatrix is raw data and the DerivedArrayDataMatrix is processed data. 
					The DerivedArrayDataMatrix associates a file of a specific format - see the 
					MAGE-TAB specification for details. In order to index the Rows and Columns 
					of DataMatrix we have generated a DimensionElement that allows us to index 
					DimensionRow and DimensionColumn. -->
			</description>
			<field name="Investigation" type="xref" xref_entity="Investigation"
				nillable="true" />
			<field name="protocolApplication" type="xref" xref_entity="ProtocolApplication"
				nillable="true"
				jpaCascade="CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH"
				description="Reference to the protocol application that was used to produce this observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model" />
			<description>FIXME: change to ObservableFeature?</description>
			<field name="Feature" type="xref" xref_entity="ObservationElement"
				xref_field="id" xref_label="name"
				description="References the ObservableFeature that this observation was made on. For example 'probe123'. Can be ommited for 1D data (i.e., a data list)." />
			<description>FIXME: change to ObservationTarget?</description>
			<field name="Target" type="xref" xref_entity="ObservationElement"
				xref_field="id" xref_label="name"
				description="References the ObservationTarget that this feature was made on. For example 'individual1'. In a correlation matrix this could be also 'probe123'." />
		</entity>
		<entity name="ObservedValue" implements="Identifiable,Observation">
			<description>
				Generic storage of values, relationships and optional ontology
				mapping of the value/relation. Values can be atomatic observations,
				e.g., length (feature) of individual 1 (target) = 179cm (value).
				Values can also be relationship values, e.g., extract (feature) of
				sample 1 (target) = derived sample (relation).
				<br />
				Discussion: how to model sample pooling in this model?
				<br />
				More Discussion: do we want to have type specific subclasses? No,
				because you can solve this by casting during querying?
			</description>
			<field name="ontologyReference" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the
				ontology definition or 'code' for this value (recommended for non-numeric
				values such as codes)" />
			<field nillable="true" name="value" index="true" description="The value observed, free text" />
			<field name="characteristicValue" label="Characteristic value" nillable="true" type="xref" xref_entity="Characteristic" 
				description="The value observed, selected from available Characteristics" />
			<field nillable="true" name="relation" type="xref"
				xref_entity="ObservationElement"
				description="Reference to other end of the relationship, if any. For example to a 'brother' or from 'sample' to 'derivedSample'." />
			<field nillable="true" auto="false" name="time" type="datetime"
				description="(Optional) Time when the value was observed. For example in time series or if feature is time-dependent like 'age'" />
			<field nillable="true" auto="false" name="endtime" type="datetime"
				description="(Optional) Time when the value's validity ended" />
			
			<!--  field name="permittedValues" type="xref" xref_entity="PermittedValue" nillable="true" /-->
			<!-- JORIS CODE THAT SHOULD NOT BE IN THE SHARED STUFF! <indices> <index 
				name="valueIdx"> <indexfield name="value"/> </index> <index name="featureIdx"> 
				<indexfield name="Feature"/> </index> <index name="targetIdx"> <indexfield 
				name="Target"/> </index> <index name="protocolApplicationIdx"> <indexfield 
				name="protocolApplication"/> </index> <index name="featurePaIdx"> <indexfield 
				name="Feature"/> <indexfield name="protocolApplication"/> </index> </indices> -->
		</entity>
	</module>
	<!-- version: release candidate 2010-02-08 <p /> GEN2PHEN Phenotype Model 
		is a minimal data model to represent a data set of phenotypic observations 
		resulting from one or more investigations. Objective is to harmonize the 
		exchange of phenotype descriptions between various repositories and to host 
		phenotype information ranging annotations in locus specific databases to 
		rich clinical reports from cohort studies. The initial version of this model 
		was compiled at the Gen2Phen phenotype workshop, May 8-9, Geneva, building 
		on previous modeling efforts from the XGAP, METABASE, PaGE, FuGE, and MAGE-TAB 
		projects. Were appropriate mapping to these models are provided. <p /> This 
		document was created by: Morris Swertz, Tomasz Adamusiak, Juha Muilu, Gudmundur 
		Thorisson, Isabel Fortier, Paul Burton, John Hancock, Illke Lappalainen, 
		Anthony Brookes, other members of the EU-GEN2PHEN, EU-CASIMIR, NBIC/BioAssist 
		collaborations and Helen Parkinson. <p> changelog/decisions 2009-07-20 2009-08-05 
		(following MPD import by TA): <ol> <li /> Changed time on ObservedValue to 
		optional. Added description field to investigation entity. Removed length="127" 
		on name and changed type to text in identifiable. </ol> changelog/decisions 
		2009-06-11 (following G2P AM4): <ol> <li /> Added self-reference on Protocol 
		to create aggregated protocols Use case: a study is a set of Questionnaires, 
		each questionaire being a protocol <li /> Added VariableDefinition as subclass 
		of Observable feature and moved attribute 'unit' from ObservedValue to ValueDefinition. 
		VariableDefinition can refer to one (?) ObservableFeature concept. Use case: 
		a questionaire (protocol) is defined to measure 'length' in cm; 'length' 
		is the observable feature, 'length in cm' the VariableDefinition. Motivation: 
		if unit was defined on ObservedValue than one cannot define the unit for 
		a protocol. If unit was defined in two places (protocol and value level) 
		then they can conflict with each other. <li /> Added timestamp to both the 
		protocolApplication and ObservedValue Use case: blood pressure was measured 
		at five ten minute intervals at 8:00, 8:10, 8:20 Motivation: protocols often 
		include repeated measurements. Positive example is the use case of blood 
		pressure time series. Negative example is 'blood pressure standing' and 'blood 
		pressure lying down' which are different observableFeatures. <li /> Adapted 
		the description of protocolapplication to say it is an 'instance' of the 
		protocol usage. <li /> Did not change observableFeature.name into observableFeature.description 
		is not advisable as it is inconsistent. <li /> Did not replace subclass InferredValue 
		with a directional self reference on ObservedValue because of understandeability 
		</ol> changelog/decisions 2009-06-12 (following meeting Juha Muilu, Morris 
		Swertz, Tomasz Adamusiak): <ol> <li /> Protocol.name is not unique within 
		an investigation as it can be reused in multiple studies, a relationship 
		definable via ProtocolApplication. <li /> ObservationTargets are not unique 
		to one investigations as they can be observed in multiple studies, a relationship 
		definable via the ObservedValue. <li /> SelfRecursion on ObservedValue for 
		multivalue and derived value was dropped for simplicity reasons. Until shown 
		otherwise multivalue features can be grouped by protocol. <li /> ObservedValue 
		name is not made unique within investigation as defies its purpose is to 
		integrate between studies. <li /> There is no explicit relationship between 
		ObservedValue.value and Category.term; such constraint checking is outside 
		the scope of this model. <li /> Added a 'value' to ParameterValue which was 
		missing. <li /> Changed that Category doesn't extend the OntologyTerm class 
		but instead refers to an instance. <li /> InferredValue seems not normalized 
		in the sense that one has to repeat ObservationTarget which is implied via 
		the ObservedValues it refers to. However, this is not changed because it 
		can be that an inference is provided without providing the ObservedValues 
		or that a Panel level inference is derived from a set of individual level 
		observedvalues. </ol> changelog/decisions 2009-08-04 (mostly bugfixes following 
		import sessions with Morris Swertz, Tomasz Adamusiak): <ol> <li> Made name 
		of observation target globally unique. Discussion to reduce this constraint 
		to unique within investigation.</li> <li> Made name of OntologySource globally 
		unique (later made undone) </li> <li> Add ontology term to value.</li> <li> 
		Made ontology URI optional, its name should be a unique identifier</li> <li> 
		Made ObservableFeature.name unique within investigation. This allows for 
		synonymous feature naming over investigations. The user of OntologyReferences 
		allows cross-study queries if there is an external mapping ontology that 
		indicates equivalence (BIG BUT EXCITING TODO)</li> <li> We now require certain 
		features on Individual like 'sex' and 'species'. This results in practical 
		problems because the data provider may use a different terminology to denote 
		this features. (in this case; Characateristics[Sex] and Characteristics[Organism] 
		DECISION: move these properties to become an 'ObservableFeature' </li> <li> 
		Next to 'father' and 'mother' one can imagine that there are more (family)relationships 
		like 'twin'. In the source data this was reported as 'OX0232:MZ twin' (awkward!) 
		We need a mechanism to enable such relationships flexibly. DECISION: need 
		to a new type of ObservedValue that can have references to one (or more?) 
		other ObservationTargets. Needs to be fully implemented still.</li> </ol> 
		changelog/decisions 2009-09-02 (more bugfixes following import sessions with 
		Morris Swertz, Tomasz Adamusiak): <ol> <li> ISSUE: VariableDefinition derives 
		from ObservableFeature, in reality will be the only class used, as the abstract 
		ObservableFeature has no unit nor categories. MOTIVATION: to have multiple 
		units on ObservableFeature? This is not achieved in the model atm, as there's 
		no relation under than inheres in, also if multiple units are defined, than 
		it would be impossible to connect them to ObservedValues. RESOLUTION: merge 
		the units and codes into ObservableFeature. Remove VariableDefinition.</li> 
		<li> ISSUE: the capability to relate observeable features. MOTIVATION: MPD 
		provides a category hierarchy for their measurements (cat1,cat2,cat3). These 
		can hardly be interpreted as hierarchy of protocols but was added as 'procotocolComponents' 
		for demonstration purposes and to test subprotocols PROPOSED RESOLUTION: 
		Change field 'ObservableFeature.ontologyTerm' from an 'xref' to 'mref'. Then 
		we can add multiple terms to one feature adding cat1,cat2,cat3 as additional 
		'tags'. Caution: this doesn't denote hierarchical relationship And rely on 
		a separate application ontology to describe these relationships (so at runtime 
		ontologies can be loaded to assist the mapping).</li> <li> ISSUE: ObservedValue 
		and ProtocolApplication could reference different Investigations. At the 
		moment investigation is referenced in 3 different classes: ObservedValue, 
		ObservableFeature and ProtocolApplication. MOTIVATION: This is to support 
		different level of granularity: -ObservableFeature needs an Investigation 
		reference for the cases when the researcher did not want to disclose actual 
		measurements values but still wanted to show what was measured. -ObservableFeatures 
		can have different investigations but share the same ProtocolApplication. 
		Using ProtocolApplications that bridge multiple investigations is probably 
		a bit too complicated. RESOLUTION: ignore in the model. Implementationwize 
		add a trigger that checks if all ObservedValues are consistent with their 
		protocolapplication regarding their Investigation.</li> <li> ISSUE: unit 
		and codelist are variants of the same thing, namely binding the range and 
		interpretation of observedValues. RESOLUTION: Made CategoryList and instance 
		of an OntologyTerm so that it can be addressed as being a unit.</li> </ol> 
		Open issues: <ol> <li> ISSUE: Categorys are a special kind of OntologyTerm, 
		i.e. well defined values. RESOLUTION: Is there a sensible way to make Category 
		extend OntologyTerm? Then ObservedValue.codeReference could be dropped.</li> 
		<li> ISSUE: In case an ObservedValue uses a CategoryList then ObservedValue.value 
		actually becomes a foreign key to Category.code. Is is neither used nor constrained. 
		RESOLUTION: create a trigger that automatically finds the appropriate label 
		for a value.</li> </ol> Following Luxembourg 2009-10-02 and 11-11 <ol> <li>Special 
		treatment of 'nulls'</li> <li>IDF type of things: contributors, publications, 
		roles etc -> see exchange format</li> <li>Added aggregate value to capture 
		dbGaP data</li> </ol> Changelog 2009-08-12 <ol> <li>Made OntologySource optional</li> 
		<li>Made ontologyTerm and OntologySource unique within invstigation </li> 
		<li>Removed ontologytTerm.termLabel as it was ambiguous with the term itself. 
		If people want to use their own coding they can use 'Category'</li> <li>Removed 
		CategoryList and Category. Instead linked ObservableFeature to one of more 
		OntologyTerms having codes.</li> </ol> Changelog 2010-01-20 <ol> <li>Further 
		extended documentation</li> <li>Discussion: do we need to remove father/mother 
		from individual -> can be done via ObservableFeature?</li> <li>Extended investigation 
		with a property to indicate source of the data. Discussion: should we put 
		in components from MAGE-TAB IDF? </li> </ol> Changelog 2010-02-08 <ol> <li>Category 
		part of model</li> </ol> Changelog 2010-07-28, by Erik Roos <ol> <li>Made 
		ObservedValue implement Nameable, so values can have a name </li> <li>Added 
		optional Endtime field to ObservedValue</li> <li>Added fields to ObservableFeature 
		needed for AnimalDB: focal, observationtargettype and observationtargetlabel</li> 
		<li>Added decorator to ObservableFeature</li> <li>Added field observationTargetType 
		to ObservationTarget</li> </ol> Changelog 2010-07-29, by Erik Roos <ol> <li>Made 
		ontologyAccession in Ontology nillable</li> <li>Made field 'investigation' 
		in ObservedValue nillable</li> <li>Made field 'value' in ObservedValue nillable, 
		because in an ObservedRelationship you don't have to fill in this field</li> 
		<li>Integrated ObservedRelationship into ObservedValue, so it becomes easier 
		to mix them in your code</li> </ol> Changelog 2010-07-30, by Erik Roos <ol> 
		<li>Commented out uniqueness constraint for 'code' field of Category, since 
		the code itself doesn't need to be unique. The combination of code and feature 
		should be unique instead.</li> </ol> Changelog 2010-08-04, by Erik Roos <ol> 
		<li>Added xref_label="name" to MREF from Protocol to ObservableFeature, so 
		interface can show nice labels.</li> <li>Added xref_label="name" to XREF 
		from InvestigationElement to Investigation</li> </ol> Changelog 2010-09-19, 
		by Morris <ol> <li>Removed ObservedValue.name as that was a workaround.</li> 
		<li>Set focal default to 'false' to keep old behavior</li> </ol> </p> -->
</molgenis>