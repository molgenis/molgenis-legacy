<molgenis name="org.molgenis">
	<module name="data">
		<description>This package enables data models to treat part of their
			data model as data matrix. is essential for Entity Attribute Value
			modeling such as used in xgap and pheno.</description>

		<!-- entity name="ObservedInference" extends="ObservedValue">
			<description> The InferredValue class defines ObservedValues that are
				inferred as result of human or computational post-processing of
				other ObservedValues. For example: hypertensive = yes when mean
				arterial pressure = 135 AND no hypertension affecting medicine is
				taken. The optional inferenceType property enables definition of the
				type of inference. For example 'mean of a lenght': the observable
				feature is 'length' and the inferenceType is 'mean'. Just as with
				regular ObservedValues, the protocol used for this inference can be
				defined via the protocolApplication association that is inherited
				from ObservedValue. The InferredValue class has no direct mapping to
				other models: XGAP would use input/ouput Data; PaGE would use a self
				reference on ObservedValue.</description>
			<field name="derivedFrom" type="mref" xref_entity="ObservedValue"
				description="References to one or more observed values that were used to infer this observation. TODO: needs multicolumn lookup" />
			<field name="inferenceType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the ontology definition for this inference. For example: mean" />
		</entity-->
		<entity name="DataFile" extends="ObservationTarget">
			<description>ObservedFile is to store observations that result in a
				file. Mapping to other models: MAGE-TAB 1.1 has the column
				ArrayDataFile and DerivedArrayDataFile. In order to make the
				MAGE-TAB 1.1. model more generic we have generalized these to
				DataFile and provided named associations to the respective types via
				Scan and Assay. TODO: make this link to MolgenisFile? Or distinguish
				between links and data?</description>
			<field name="uri" description="reference to the location of the file" />
			<field name="format" type="xref" xref_entity="OntologyTerm"
				description="format of the file. Discussion: is this not already solved in MolgenisFile" />
		</entity>
		<!-- Data no longer implements="Observation" -->
		<entity name="Data" extends="ProtocolApplication" xref_label="name"  decorator="decorators.DataDecorator">
			<description>
				Data is a data structure to store a homogeneous matrix of
				observedvalues as one unit, that is, all data elements in the set
				have the same type of feature, target and value. For example: an
				expression qtlProfile (observation.feature) for a Panel of mouse
				(observation.target) that consists of a matrix of Probe X marker
				(featureType and targetType respectively). In the user interface we
				expect that this observation can be shown as a bigger set of
				observations but click-able so the user can drill down to the
				underlying matrix.
				<br />
				Data is also an observationTarget: this allows Data to be referred
				to in an ObservedValue.relation. TODO: describe how this can be used
				to define inputs/outputs for a protocolApplication. This would allow
				us to use it to link 'pheno' to 'cluster' package so that the whole
				provenace can be administrated as part of the observation models.
				<br />
				This class maps to XGAP.DataMatrix and MAGE-TAB.Data.
			</description>
			<field label="ColumnType" name="FeatureType" type="enum"
				enum_options="[Chromosome,DerivedTrait,EnvironmentalFactor,Gene,Individual,Marker,MassPeak,Measurement,Metabolite,Panel,Probe,ProbeSet,Sample,Spot,SNP,Promoter,ChipPeak]"
				description="Defines the type of the columns of this data set. Each column refers to a Feature or Subject. " />
				<!-- enum_options="[Marker,Probe,ProbeSet,Individual,Sample,PairedSample,MassPeak,Gene,Clone,Trait,Subject,Strain,Metabolite,Spot,Phenotype,NMRBin,Factor,Derived]" -->
			<field label="RowType" name="TargetType" type="enum"
				enum_options="[Chromosome,DerivedTrait,EnvironmentalFactor,Gene,Individual,Marker,MassPeak,Measurement,Metabolite,Panel,Probe,ProbeSet,Sample,Spot,SNP,Promoter,ChipPeak]"
				description="Defines the type of the rows of this matrix. Each row refers to a Feature or Subject." />
				<!-- enum_options="[Marker,Probe,ProbeSet,Individual,Sample,PairedSample,MassPeak,Gene,Clone,Trait,Subject,Strain,Metabolite,Spot,Phenotype,NMRBin,Factor,Derived]" -->
			<field name="ValueType" type="enum" enum_options="[Text,Decimal]"
				description="Type of the values of this matrix, either text strings or decimal numbers." />
			<field name="Storage" type="enum" enum_options="[Database,Binary,CSV]"
				default="Binary" nillable="false"
				description="Tells you how the data elements are stored or should be stored. For example, 'Binary'." />
			<unique fields="name" description="name is unique within data matrix" />
		</entity>
		<entity name="DataElement" implements="Observation" abstract="true">
			<description> Extension of observed value that keeps track of the
				position in a Data matrix and can be used to store the elements of
				Data. Copied from XGAP. MAGE-TAB 1.1. has the column ArrayDataMatrix
				and DerivedArrayDataMatrix. The formats of both types are
				tab-delimited and the distinction is that an ArrayDataMatrix is raw
				data and the DerivedArrayDataMatrix is processed data. The
				DerivedArrayDataMatrix associates a file of a specific format -
				seehe MAGE-TAB specification for details. In order to index the Rows
				and Columns of DataMatrix we have generated a DimensionElement that
				allows us to index DimensionRow and DimensionColumn.</description>
			<field name="Data" type="xref" xref_entity="Data"
				description="Reference to the data set this entity belongs to." />
			<field name="FeatureIndex" type="int" description="Row position in the matrix." />
			<field name="TargetIndex" type="int" description="Col position in the matrix." />
			<!--field name="dataIndex" type="int" description="unique position in the matrix" /-->
			<unique fields="FeatureIndex,TargetIndex,Data" />
		</entity>
		<entity name="BinaryDataMatrix" extends="MolgenisFile">
			<description>Binary file backend for a datamatrix. This extension is
				used to deal with the actual source file. Coupled to a matrix with
				source type 'BinaryFile'. This entity is not shown in the interface.
				Discussion: I am not so happy with the need of alternative
				subclasses. Instead you just need a driver.</description>
			<field name="Data" type="xref" xref_entity="Data"
				description="Reference to the datamatrix this binary file belongs to." />
		</entity>
		<entity name="CSVDataMatrix" extends="MolgenisFile">
			<description>CSV file backend for a datamatrix. Convenient to deal
				with the actual source file. Coupled to a matrix with source type
				'CSVFile'. This entity is not shown in the interface.</description>
			<field name="Data" type="xref" xref_entity="Data"
				description="Reference to the datamatrix this CSV file belongs to." />
		</entity>
		<entity name="DecimalDataElement" implements="DataElement">
			<description> A DataElement for storing decimal data.</description>
			<field name="Value" label="Value" nillable="true" type="decimal"
				description="The value, e.g., correlation." />
		</entity>
		<entity name="TextDataElement" implements="DataElement">
			<description>Store text data</description>
			<field name="Value" label="Value" type="varchar" nillable="true"
				length="127" description="The value, e.g., genotype strings like AA, BA, BB." />
		</entity>
		<entity name="OriginalFile" extends="MolgenisFile">
			<description>An unmodified original file that belongs to this
				datamatrix.</description>
			<field name="Data" type="xref_single" xref_entity="Data"
				description="Reference to the datamatrix this file belongs to." />
		</entity>
	</module>
</molgenis>