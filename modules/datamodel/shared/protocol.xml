<?xml version="1.0" encoding="UTF-8"?>
<molgenis name="org.molgenis">
	<module name="protocol">
		<description>This package is a merger of FUGE, XGAP, MAGE-TAB and
			Pheno-OM classes dealing with protocols. Discussion: are protocols
			study specific, i.e., are they InvestigationElements?
		</description>
		<entity name="Protocol" implements="InvestigationElement">
			<description>
				The Protocol class defines parameterizable descriptions of methods;
				each protocol has a unique name within an Study. Each
				ProtocolApplication can define the ObservableFeatures it can
				observe. Also the protocol parameters can be modeled using
				ObservableFeatures (Users are expected to 'tag' the observeable
				feature by setting ObserveableFeature type as 'ProtocolParameter'.
				Examples of protocols are: SOP for blood pressure measurement used
				by UK biobank, or 'R/qtl' as protocol for statistical analysis.
				Protocol is a high level object that represents the details of
				protocols used during the investigation. The uses of Protocols to
				process BioMaterials and Data are referenced by ProtocolApplication
				(in the SDRF part of the format). Protocol has an association to
				OntologyTerm to represent the type of protocol. Protocols are
				associated with Hardware, Software and Parameters used in the
				Protocol. An example from ArrayExpress is E-MTAB-506
				<a
					href="ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt">
					ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.
				</a>
				<br />
				The FUGE equivalent to Protocol is FuGE::Protocol.
				<br />
				The Protocol class maps to FuGE/XGAP/MageTab Protocol, but in
				contrast to FuGE it is not required to extend protocol before use.
				The Protocol class also maps to METABASE:Form (note that components
				are solved during METABASE:Visit which can be nested). Has no
				equivalent in PaGE.
			</description>
			<field name="ProtocolType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="annotation of the protocol to a well-defined ontological class." />
			<field name="description" type="richtext" nillable="true"
				description="Description, or reference to a description, of the protocol" />
			<!-- TOMASZ: Changed xref_entity=ObservableFeature to ObservationElement, 
				as ObservableFeature/ObservationTarget was merged into ObservationElement 
				in the phenoflow model -->
			<field name="Features" type="mref" xref_entity="ObservableFeature"
				nillable="true"
				description="The features that can be observed using this protocol. For example 'length' or 'rs123534' or 'probe123'. Also protocol parameters are considered observable features as they are important to the interpretation of the observed values." />
			<!-- TODO/discussion: does the field below work? -->
			<field name="TargetFilter" type="string" nillable="true"
				description="Expression that filters the InvestigationElements that can be targetted using this protocol.
				This helps the user to only select from targets that matter when setting observedvalues. For example: type='individual' AND species = 'human'" />
			<field name="Contact" type="xref" nillable="true" xref_entity="Person"
				description="TODO Check if there can be multiple contacts." />
			<field name="subprotocols" type="mref" xref_entity="Protocol" nillable="true" description="Subprotocols of this protocol"/>
			<!-- TODO/discussion: add the fields below? -->
			<!-- <field name="targettypeAllowedForApplication" type="xref" xref_entity="MolgenisEntity" 
				description="Subclass of ObservationTarget (Individual, Panel or Location) 
				that this Protocol can only be applied to (example: a Protocol 'SetSpecies' 
				can only be applied to Panels)" nillable="true" label="ObservationTarget 
				type allowed for application" /> <field name="panelLabelAllowedForApplication" 
				type="string" description="Label that must have been applied to the Panel 
				that this Protocol can be applied to (example: a Protocol 'SetSpecies' can 
				only be applied to Panels labeled as 'Species')" nillable="true" label="Panel 
				label allowed for application" /> -->
		</entity>
		<entity name="ProtocolApplication" implements="InvestigationElement">
			<description>
				A ProtocolApplication class defines the actual action of observation
				by refering to a protocol and optional ParameterValues. The name
				field can be used to label applications with a human understandeable
				tag. For example: the action of blood pressure measurement on 1000
				individuals, using a particular protocol, resulting in 1000
				associated observed values. If desired, protocols can be shared
				between Studys; in those cases one should simply refer to a protocol
				in another Study.
				<br />
				ProtocolApplications are used in MAGE-TAB format to reference to
				protocols used, with optionally use of certain protocol parameter
				values. For example, a Source may be transformed into a Labeled
				Extract by the subsequent application of a Extraction and Labeling
				protocol. ProtocolApplication is associated with and Edge that links
				input/output, e.g. Source to Labeled Extract. The order of the
				application of protocols can be set in order to be able to
				reconstruct the left-to-right order of protocol references in
				MAGE-TAB format. The FuGE equivalent to ProtocolApplication is
				FuGE:ProtocolApplication, however input/output is modeled using
				Edge.
				<br />
				The ProtocolApplication class maps to FuGE/XGAP ProtocolApplication,
				but in FuGE ProtocolApplications can take Material or Data (or both)
				as input and produce Material or Data (or both) as output. Similar
				to PaGE.ObservationMethod. Maps to METABASE:Visit (also note that
				METABASE:PlannedVisit allows for planning of protocol applications;
				this is outside scope for this model?).
			</description>
			<field auto="true" name="time" type="datetime"
				description="time when the protocol was applied." />
			<field name="protocol" type="xref" xref_entity="Protocol"
				nillable="true" description="Reference to the protocol that is being used." />
			<field name="Performer" type="mref" xref_entity="Person"
				nillable="true" />
		</entity>
		<entity name="ProtocolDocument" extends="MolgenisFile">
			<field name="protocol" type="xref" xref_entity="Protocol" />
			<field name="document" type="file"/>
		</entity>
		<entity name="Workflow" extends="Protocol" implements="Identifiable,Nameable">
			<description>A workflow is a plan to execute a series of subprotocols
				in a particular order. Each workflow elements is another protocol as
				refered to via WorkflowElement. Because Workflow extends Protocol,
				workflows can be nested just as any other protocol.
			</description>
			<unique fields="name" />
		</entity>
		<entity name="WorkflowElement" implements="Nameable"
			xref_label="name">
			<description>Elements of a workflow are references to protocols. The
				whole workflow is a directed graph with each element pointing to the
				previousSteps that the current workflow element depends on.
			</description>
			<field name="Workflow" type="xref" xref_entity="Workflow"
				xref_label="name" description="Workflow this element is part of" />
			<field name="protocol" type="xref" xref_entity="Protocol"
				description="Protocol to be used at this workflow step" />
			<field name="PreviousSteps" type="mref" xref_entity="WorkflowElement"
				nillable="true"
				description="Previous steps that need to be done before this protocol can be executed." />
			<!-- <field name="ExecutionTime" nillable="true" type="text" description="Predicted 
				execution time" default="23:59:00" / -->
			<unique fields="name" />
			<!-- field name="Defaults" type="mref" xref_entity="ObservedValue" nillable="true" 
				description="Default values of compute protocol features, which should be 
				defined on workflow element level" / -->
		</entity>
		<entity name="WorkflowElementParameter" implements="Identifiable">
			<description>Element parameters are the way to link workflow elements
				together. It allows override of the parameters from the previous
				step.
			</description>
			<field name="WorkflowElement" type="xref" xref_entity="WorkflowElement"
				description="To attach a parameter to a WorkflowElement" />
			<field name="Parameter" type="xref" xref_entity="ObservableFeature"
				description="Parameter definition." />
			<field name="Value"
				description="Value of this parameter. Can be a template of form ${other} refering to previous values in context." />
			<unique fields="WorkflowElement,Parameter" description="Feature value is set only once per element"/>
		</entity>
		<!-- DISCUSSION: we added ComputeFeature, ComputeElement and ComputeValue 
			for understandability. But I think we don't need them (and actually we are 
			better off without: we don't care about ComputeFeature as we want to be able 
			to use any feature; we don't care about ComputeValue as we want any ObservedValue, 
			and ComputeElement is just as WorkflowElement. Possibly we want ComputeWorkflow 
			so we can validate if all elements are ComputeProtocols). Proposal, move 
			the remaining stuff to protocol.xml. -->
		<description>Molgenis compute framework that extends the molgenis
			protocol framework adding the computational details
		</description>
		<!-- entity name="ProtocolOutput" implements="Observation"> <description>Initial 
			proposal of specifying output for error handling</description> <field name="name" 
			type="text" description="name of the output"/> <field name="pathTemplate" 
			type="text" description="template of the path to the output"/> <field name="Inputs" 
			type="mref" xref_entity="ComputeFeature" label="Inputs" nillable="true" description="input 
			parameters used to define path to the output"/> <field name="type" type="enum" 
			enum_options="[file,table,string]" default="file" description="type of the 
			expected output"/> <field name="data_type" type="enum" enum_options="[data,log]" 
			description="specifies, if produced data is data or a log"/> </entity> -->
	</module>
</molgenis>