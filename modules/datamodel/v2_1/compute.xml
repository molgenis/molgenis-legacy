<?xml version="1.0" encoding="UTF-8"?>
<molgenis name="org.molgenis">
	<description>
		MOLGENIS compute framework is used to model compute
		pipelines.
	</description>
	<module name="compute">
		<entity name="ComputeProtocol" extends="Protocol">
			<description>
				Executable definitions of computational 'protocols' of analysis. For
				example: bwa-align. Therefore the Protocol class is extended with:
				<ul>
					<li>
						<b>scriptTemplate</b>
						: Each operation is defined in a wrapping, that is, a
						parameterizable description of the computation in Freemarker or R
						(depends on interpeter). The parameters are defined via the
						inputs/outputs of the
						protocol. The iteration is defined by the
						targetType.
					</li>
					<li>
						<b>scriptInterpreter</b>
						: When this protocol is 'applied', the parameters are merged with
						the freemarker script to produce an executable analysis which is
						then interpreted by the chosen interpreter, currently in either
						bash, R or python.
					</li>
				</ul>
				<h2>discussion:</h2>
				<ul>
					<li>How about different types of parameters? E.g. 'input_files',
						'output_files', 'logs', 'executables'. These each need different
						handling between grid/cluster, and some may be optional.
					</li>
				</ul>
			</description>
			<field name="mem" default="2Gb" type="string"
				description="# PBS memory argument (e.g. 512mb, 4gb)" />
			<field name="cores" default="2" type="int" description="# required cores" />
			<field name="nodes" default="1" type="int" description="# required nodes" />
			<field name="walltime" default="00:00:30" type="string"
				description="# the expected maximum runtime of this job. Notation: 'dd:hh:mm'" />
			<field name="scriptInterpreter" type="enum" default="bash"
				enum_options="[bash,R,python]"
				description="the interpreter used to run this command. For example 'shellTemplate'. Determines execution mode." />
			<field name="scriptTemplate" type="freemarker"
				description="Commandline or (template of) an script, e.g. in R. Templating engine is freemarker." />
		</entity>
		<entity name="ComputeParameter" extends="ObservableFeature">
			<description>Parameter are the inputs or outputs into an
				ComputeProtocol. It reuses all of ObservableFeature to define the
				type of the parameters.
			</description>
			<field name="defaultValue" type="text" nillable="true"
				description="the value of the parameter for ComputeProtocols" />
			<field name="hasOne" type="mref" xref_entity="ComputeParameter" />
		</entity>
		<entity name="ComputeJob" extends="ProtocolApplication">
			<description>A protocolApplication that reports the scheduling or
				application of running a ComputeProtocol. Discussion: how to tie
				this closer to the data?
			</description>
			<field name="protocol" type="xref" xref_entity="ComputeProtocol"
				description="reference to the protocol. Overrides ProtocolApplication.protocol" />
			<field name="scriptToExecute" nillable="true" type="text"
				description="The actual command to be sent to the cluster, is a
			filled in version of the one define in the ComputeProtocol, depending on the interpreter (e.g. R gets values prepended, bash gets freemarker template applied" />
			<field name="scriptInterpreter" type="enum" enum_options="[bash,R,python]"
				description="the interpreter used to run this command. For example 'shellTemplate'" />
			<field name="PrevSteps" type="mref" xref_entity="ComputeJob"
				nillable="true"
				description="To keep track of calculation dependencies == workflow; Note: can be changed at runtime (name was PreviousSteps)" />
			<!-- todo: mechanism to identify backend and id within backend -->
			<field name="ComputeResource" type="xref" xref_entity="ComputeResource"
				nillable="true" description="The compute backend used" />
			<field name="JobID" nillable="true"
				description="The ID of this job within the cluster." />
			<field name="OutputLog" nillable="true" type="text"
				description="field to show the content of the log file" />
			<field name="ErrorLog" nillable="true" type="text"
				description="field to show the content of the error log" />
		</entity>
		<entity name="ComputeJobHistory" implements="Autoid">
			<description>Keep track of the state(changes) of this job.
			</description>
			<field name="ComputeJob" type="xref" xref_entity="ComputeJob" />
			<field name="StatusChangeTime" type="datetime" description="time log for this job" />
			<field name="StatusCode" type="enum"
				enum_options="[submitted,started,paused,finished,error,resubmitted]"
				default="paused"
				description="Status code of this job. State transitions: submitted->started->[paused|finished|error]->resubmitted->started->etc" />
		</entity>
		<entity name="ComputeResource" implements="Identifiable">
			<description>Declaration of a compute resource such as a PBS cluster,
				Amazon cloud or GRID
			</description>
			<field name="Queue" nillable="true" type="text"
				description="ADDED TO FIX THE BUILD - NEEDED IN PbsSubmitApplication.java: currentjob.setQueue(app.getQueue());" />
			<unique fields="identifier" />
		</entity>
		<entity name="ComputeWorkflow" implements="Identifiable">
			<description>A workflow is a plan to execute a series of subprotocols
				in a particular order. Each workflow elements is another protocol as
				refered to via WorkflowElement. Because Workflow extends Protocol,
				workflows can be nested just as any other protocol.
			</description>
			<field type="text" name="description" />
			<unique fields="identifier" />
		</entity>
		<entity name="ComputeWorkflowStep" implements="Identifiable">
			<description>Elements of a workflow are references to protocols. The
				whole workflow is a directed graph with each element pointing to the
				previousSteps that the current workflow element depends on.
			</description>
			<field name="ComputeWorkflow" type="xref" xref_entity="ComputeWorkflow"
				description="Workflow this element is part of" />
			<field name="ComputeProtocol" type="xref" xref_entity="ComputeProtocol"
				description="Protocol to be used at this workflow step" />
			<field name="PrevSteps" type="mref" xref_entity="ComputeWorkflowStep"
				nillable="true"
				description="Previous steps that need to be done before this protocol can be executed." />
			<unique fields="ComputeWorkflow,identifier" />
		</entity>
	</module>
</molgenis>